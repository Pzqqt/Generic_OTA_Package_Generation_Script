#!/sbin/sh
# Shell Script EDIFY Replacement: Recovery Flashable Zip
# osm0sis @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIPFILE="$3";
DIR=$(dirname "$ZIPFILE");

# ui_print "<message>" ["<message 2>" ...]
ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" >> $OUTFD;
    shift;
  done;
}
# show_progress <amount> <time>
show_progress() { echo "progress $1 $2" >> $OUTFD; }
# set_progress <amount>
set_progress() { echo "set_progress $1" >> $OUTFD; }

# unmount <partition>
unmount() { umount "$1"; }
# is_mounted <partition>
is_mounted() {
  case `mount` in
    *" $1 "*) echo 1;;
    *) echo 0;;
  esac;
}

# write_raw_image <file> <block>
write_raw_image() { dd if="$1" of="$2"; }

# package_extract_file <file> <destination_file>
package_extract_file() { mkdir -p "$(dirname "$2")"; unzip -o "$ZIPFILE" "$1" -p > "$2"; }

# package_extract_dir <dir> <destination_dir>
package_extract_dir() {
  for entry in $(unzip -l "$ZIPFILE" "$1/*" 2>/dev/null | tail -n+4 | grep -o " $1.*$" | cut -c2-); do
    outfile="$(echo "$entry" | sed "s|${1}|${2}|")";
    mkdir -p "$(dirname "$outfile")";
    unzip -o "$ZIPFILE" "$entry" -p > "$outfile";
  done;
}

# delete <file> [<file2> ...]
delete() { rm -f "$@"; }

# delete_recursive <dir> [<dir2> ...]
delete_recursive() { rm -rf "$@"; }

# symlink <file/dir> <link> [<link2> ...]
symlink() { ln -s "$@"; }

# set_metadata <file> <uid|gid|mode|capabilities|selabel> <value> [<uid|gid|mode|capabilities|selabel_2> <value2> ...]
set_metadata() {
  file="$1";
  shift;
  until [ ! "$2" ]; do
    case $1 in
      uid) chown $2 "$file";;
      gid) chown :$2 "$file";;
      mode) chmod $2 "$file";;
      capabilities) twrp setcap $2 "$file";;
      selabel) chcon -h $2 "$file" || chcon $2 "$file";
      ;;
      *) ;;
    esac;
    shift 2;
  done;
}
# set_metadata_recursive <dir> <uid|gid|dmode|fmode|capabilities|selabel> <value> [<uid|gid|dmode|fmode|capabilities|selabel_2> <value2> ...]
set_metadata_recursive() {
  dir="$1";
  shift;
  until [ ! "$2" ]; do
    case $1 in
      uid) chown -R $2 "$dir";;
      gid) chown -R :$2 "$dir";;
      dmode) find "$dir" -type d -exec chmod $2 {} +;;
      fmode) find "$dir" -type f -exec chmod $2 {} +;;
      capabilities) find "$dir" -exec twrp setcap $2 {} +;;
      selabel) find "$dir" -exec chcon -h $2 '{}' + || find "$dir" -exec chcon $2 '{}' +;
      ;;
      *) ;;
    esac;
    shift 2;
  done;
}

# set_perm <owner> <group> <mode> <file> [<file2> ...]
set_perm() {
  uid=$1; gid=$2; mod=$3;
  shift 3;
  chown $uid:$gid "$@" || chown $uid.$gid "$@";
  chmod $mod "$@";
}

# set_perm_recursive <owner> <group> <dir_mode> <file_mode> <dir> [<dir2> ...]
set_perm_recursive() {
  uid=$1; gid=$2; dmod=$3; fmod=$4;
  shift 4;
  until [ ! "$1" ]; do
    chown -R $uid:$gid "$1" || chown -R $uid.$gid "$1";
    find "$1" -type d -exec chmod $dmod {} +;
    find "$1" -type f -exec chmod $fmod {} +;
    shift;
  done;
}

# file_getprop <file> <property>
file_getprop() { grep "^$2=" "$1" | head -n1 | cut -d= -f2; }

# getprop <property>
getprop() { test -e /sbin/getprop && /sbin/getprop $1 || grep "^$1=" /default.prop | head -n1 | cut -d= -f2; }

sha1() {
    sha1sum $1 | awk '{print $1}';
}

# apply_patch_check_sp <file> [<sha1_hex> [<sha1_hex2> ...]]
apply_patch_check_sp() {
    local file_path="$1"
    local file_sha1=$(sha1 "${file_path}")
    shift
    while [ $# != 0 ]; do
        [ "$file_sha1" == "$1" ] && return 0;
        shift
    done
    abort "$file_path" " has unexpected contents.";
}

# apply_patch_sp <src_path> <dst_sha1> <src_sha1> <patch>
apply_patch_sp() {
    local file_sha1=$(sha1 "${1}")
    [ "$file_sha1" == "$2" ] && return 0;
    [ "$file_sha1" == "$3" ] && /tmp/bin/bspatch "$1" "$1" "$4";
}

# abort [<message>]
abort() { ui_print "$*"; exit 1; }

# assert "<command>" ["<command2>"]
assert() {
  until [ ! "$1" ]; do
    $1;
    test $? == 1 && abort 'assert failed('"$1"')';
    shift;
  done;
}

install_bb() {
  local ota_tmp=/tmp/ota_package
  local bb_bin=${ota_tmp}/bin/busybox
  local bb_dir=/tmp/bb
  rm -rf $ota_tmp
  mkdir -p $ota_tmp
  unzip "$ZIPFILE" -d $ota_tmp
  [ -f $bb_bin ] || abort "Error: Failed to unzip package!"
  rm -rf $bb_dir
  mkdir $bb_dir
  cp -f $bb_bin ${bb_dir}/busybox
  chmod 755 ${bb_dir}/busybox
  ${bb_dir}/busybox --install -s $bb_dir
  export PATH_BAK=$PATH
  echo $PATH | grep -q "^$bb_dir" || export PATH=${bb_dir}:${PATH}
  rm -rf $ota_tmp
}

install_bb
